using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using Newtonsoft.Json;

namespace BasisFrameWork.Extension
{
    /// <summary>
    /// 规则：
    /// 1、获取以Get开头
    /// 2、转换以To开头
    /// 3、判断以Is开头
    /// </summary>
    public static partial class StringExtension
    {
        /// <summary>
        /// 获取html内容的第一张图片Url地址
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static string GetFirstImageUrl(this string source) {
            string rc = "";

            if (!string.IsNullOrWhiteSpace(source?.Trim())) {
                Regex reg = new Regex(@"<\s*?img\s*?src=['""](.*?[^'])['""]", RegexOptions.IgnoreCase);
                Match match = reg.Match(source);
                if (match.Success && match.Groups?.Count > 1)
                    rc = match.Groups[1].Value;
            }

            return rc;
        }


        /// <summary>
        /// 截取内容的部分字符作为摘要，默认提取100个字符
        /// </summary>
        /// <param name="source"></param>
        /// <param name="length">需要截取字符串的长度</param>
        /// <param name="isStripHtml">是否清除HTML代码 true:是 false:否</param>
        /// <returns></returns>
        public static string GetAbstract(this string source, int length = 100, bool isStripHtml = true) {
            if (string.IsNullOrEmpty(source) || length == 0)
                return "";
            if (isStripHtml) {
                Regex re = new Regex("<[^>]*>");
                source = re.Replace(source, "");
                source = Regex.Replace(source, "&nbsp;|&amp;|&shy;|&#160;|&#173;|&bull;|&lt;|&gt;", " ", RegexOptions.IgnoreCase);
                source = source.Replace("　", "").Replace(" ", "");
                if (source.Length <= length)
                    return source;
                else
                    return source.Substring(0, length) + "……";
            }
            else {
                if (source.Length <= length)
                    return source;

                int pos = 0, npos = 0, size = 0;
                bool firststop = false, notr = false, noli = false;
                StringBuilder sb = new StringBuilder();
                while (true) {
                    if (pos >= source.Length)
                        break;
                    string cur = source.Substring(pos, 1);
                    if (cur == "<") {
                        string next = source.Substring(pos + 1, 3).ToLower();
                        if (next.IndexOf("p") == 0 && next.IndexOf("pre") != 0) {
                            npos = source.IndexOf(">", pos) + 1;
                        }
                        else if (next.IndexOf("/p") == 0 && next.IndexOf("/pr") != 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length)
                                sb.Append("<br/>");
                        }
                        else if (next.IndexOf("br") == 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length)
                                sb.Append("<br/>");
                        }
                        else if (next.IndexOf("img") == 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length) {
                                sb.Append(source.Substring(pos, npos - pos));
                                size += npos - pos + 1;
                            }
                        }
                        else if (next.IndexOf("li") == 0 || next.IndexOf("/li") == 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length) {
                                sb.Append(source.Substring(pos, npos - pos));
                            }
                            else {
                                if (!noli && next.IndexOf("/li") == 0) {
                                    sb.Append(source.Substring(pos, npos - pos));
                                    noli = true;
                                }
                            }
                        }
                        else if (next.IndexOf("tr") == 0 || next.IndexOf("/tr") == 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length) {
                                sb.Append(source.Substring(pos, npos - pos));
                            }
                            else {
                                if (!notr && next.IndexOf("/tr") == 0) {
                                    sb.Append(source.Substring(pos, npos - pos));
                                    notr = true;
                                }
                            }
                        }
                        else if (next.IndexOf("td") == 0 || next.IndexOf("/td") == 0) {
                            npos = source.IndexOf(">", pos) + 1;
                            if (size < length) {
                                sb.Append(source.Substring(pos, npos - pos));
                            }
                            else {
                                if (!notr) {
                                    sb.Append(source.Substring(pos, npos - pos));
                                }
                            }
                        }
                        else {
                            npos = source.IndexOf(">", pos) + 1;
                            sb.Append(source.Substring(pos, npos - pos));
                        }
                        if (npos <= pos)
                            npos = pos + 1;
                        pos = npos;
                    }
                    else {
                        if (size < length) {
                            sb.Append(cur);
                            size++;
                        }
                        else {
                            if (!firststop) {
                                sb.Append("……");
                                firststop = true;
                            }
                        }
                        pos++;
                    }

                }
                return sb.ToString();
            }
        }

        /// <summary>
        /// 获取每个汉字的首字母(大写)
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static string GetFirstLetterForEachChineseCharacter(this string source) {
            return GetFirstLetterForEachChineseCharacterMultipal(source)?.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries)?.FirstOrDefault();
        }

        /// <summary>
        /// 获取每个汉字的首字母(大写)，如果是多音字，则以半角逗号分隔每个拼音组合。
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static string GetFirstLetterForEachChineseCharacterMultipal(this string source) {
            source = source?.Trim();
            if (!source.IsStartWithChinese()) {
                return source;
            }
            if (string.IsNullOrWhiteSpace(source)) return "";

            int i, j, k, m;
            string tmpStr;
            string returnStr = ""; //返回最终结果的字符串
            string[] tmpArr;
            for (i = 0; i < source.Length; i++) { //处理汉字字符串,对每个汉字的首字母进行一次循环
                tmpStr = GetPinyin((char)source[i]); //获取第i个汉字的拼音首字母,可能为1个或多个
                if (tmpStr.Length > 0) { //汉字的拼音首字母存在的情况才进行操作
                    if (returnStr != "") { //不是第一个汉字
                        Regex regex = new Regex(",");
                        tmpArr = regex.Split(returnStr);
                        returnStr = "";
                        for (k = 0; k < tmpArr.Length; k++) {
                            for (j = 0; j < tmpStr.Length; j++) //对返回的每个首字母进行拼接
                            {
                                string charcode = tmpStr[j].ToString(); //取出第j个拼音字母
                                returnStr += tmpArr[k] + charcode + ",";
                            }
                        }
                        if (returnStr != "")
                            returnStr = returnStr.Substring(0, returnStr.Length - 1);
                    }
                    else { //构造第一个汉字返回结果
                        for (m = 0; m < tmpStr.Length - 1; m++)
                            returnStr += tmpStr[m] + ",";
                        returnStr += tmpStr[tmpStr.Length - 1];
                    }
                }
            }
            return returnStr; //返回处理结果字符串，以，分隔每个拼音组合
        }

        //获取单个汉字对应的拼音首字符字符串
        private static string GetPinyin(char chineseCharacter) {
            // 汉字拼音首字母列表 本列表包含了20902个汉字,收录的字符的Unicode编码范围为19968至40869
            string strChineseFirstPY = "";
            //此处收录了375个多音字
            string MultiPinyin = "19969:DZ,19975:WM,19988:QJ,20048:YL,20056:SC,20060:NM,20094:QG,20127:QJ,20167:QC,20193:YG,20250:KH,20256:ZC,20282:SC,20285:QJG,20291:TD,20314:YD,20340:NE,20375:TD,20389:YJ,20391:CZ,20415:PB,20446:YS,20447:SQ,20504:TC,20608:KG,20854:QJ,20857:ZC,20911:PF,20504:TC,20608:KG,20854:QJ,20857:ZC,20911:PF,20985:AW,21032:PB,21048:XQ,21049:SC,21089:YS,21119:JC,21242:SB,21273:SC,21305:YP,21306:QO,21330:ZC,21333:SDC,21345:QK,21378:CA,21397:SC,21414:XS,21442:SC,21477:JG,21480:TD,21484:ZS,21494:YX,21505:YX,21512:HG,21523:XH,21537:PB,21542:PF,21549:KH,21571:E,21574:DA,21588:TD,21589:O,21618:ZC,21621:KHA,21632:ZJ,21654:KG,21679:LKG,21683:KH,21710:A,21719:YH,21734:WOE,21769:A,21780:WN,21804:XH,21834:A,21899:ZD,21903:RN,21908:WO,21939:ZC,21956:SA,21964:YA,21970:TD,22003:A,22031:JG,22040:XS,22060:ZC,22066:ZC,22079:MH,22129:XJ,22179:XA,22237:NJ,22244:TD,22280:JQ,22300:YH,22313:XW,22331:YQ,22343:YJ,22351:PH,22395:DC,22412:TD,22484:PB,22500:PB,22534:ZD,22549:DH,22561:PB,22612:TD,22771:KQ,22831:HB,22841:JG,22855:QJ,22865:XQ,23013:ML,23081:WM,23487:SX,23558:QJ,23561:YW,23586:YW,23614:YW,23615:SN,23631:PB,23646:ZS,23663:ZT,23673:YG,23762:TD,23769:ZS,23780:QJ,23884:QK,24055:XH,24113:DC,24162:ZC,24191:GA,24273:QJ,24324:NL,24377:TD,24378:QJ,24439:PF,24554:ZS,24683:TD,24694:WE,24733:LK,24925:TN,25094:ZG,25100:XQ,25103:XH,25153:PB,25170:PB,25179:KG,25203:PB,25240:ZS,25282:FB,25303:NA,25324:KG,25341:ZY,25373:WZ,25375:XJ,25384:A,25457:A,25528:SD,25530:SC,25552:TD,25774:ZC,25874:ZC,26044:YW,26080:WM,26292:PB,26333:PB,26355:ZY,26366:CZ,26397:ZC,26399:QJ,26415:ZS,26451:SB,26526:ZC,26552:JG,26561:TD,26588:JG,26597:CZ,26629:ZS,26638:YL,26646:XQ,26653:KG,26657:XJ,26727:HG,26894:ZC,26937:ZS,26946:ZC,26999:KJ,27099:KJ,27449:YQ,27481:XS,27542:ZS,27663:ZS,27748:TS,27784:SC,27788:ZD,27795:TD,27812:O,27850:PB,27852:MB,27895:SL,27898:PL,27973:QJ,27981:KH,27986:HX,27994:XJ,28044:YC,28065:WG,28177:SM,28267:QJ,28291:KH,28337:ZQ,28463:TL,28548:DC,28601:TD,28689:PB,28805:JG,28820:QG,28846:PB,28952:TD,28975:ZC,29100:A,29325:QJ,29575:SL,29602:FB,30010:TD,30044:CX,30058:PF,30091:YSP,30111:YN,30229:XJ,30427:SC,30465:SX,30631:YQ,30655:QJ,30684:QJG,30707:SD,30729:XH,30796:LG,30917:PB,31074:NM,31085:JZ,31109:SC,31181:ZC,31192:MLB,31293:JQ,31400:YX,31584:YJ,31896:ZN,31909:ZY,31995:XJ,32321:PF,32327:ZY,32418:HG,32420:XQ,32421:HG,32438:LG,32473:GJ,32488:TD,32521:QJ,32527:PB,32562:ZSQ,32564:JZ,32735:ZD,32793:PB,33071:PF,33098:XL,33100:YA,33152:PB,33261:CX,33324:BP,33333:TD,33406:YA,33426:WM,33432:PB,33445:JG,33486:ZN,33493:TS,33507:QJ,33540:QJ,33544:ZC,33564:XQ,33617:YT,33632:QJ,33636:XH,33637:YX,33694:WG,33705:PF,33728:YW,33882:SR,34067:WM,34074:YW,34121:QJ,34255:ZC,34259:XL,34425:JH,34430:XH,34485:KH,34503:YS,34532:HG,34552:XS,34558:YE,34593:ZL,34660:YQ,34892:XH,34928:SC,34999:QJ,35048:PB,35059:SC,35098:ZC,35203:TQ,35265:JX,35299:JX,35782:SZ,35828:YS,35830:E,35843:TD,35895:YG,35977:MH,36158:JG,36228:QJ,36426:XQ,36466:DC,36710:JC,36711:ZYG,36767:PB,36866:SK,36951:YW,37034:YX,37063:XH,37218:ZC,37325:ZC,38063:PB,38079:TD,38085:QY,38107:DC,38116:TD,38123:YD,38224:HG,38241:XTC,38271:ZC,38415:YE,38426:KH,38461:YD,38463:AE,38466:PB,38477:XJ,38518:YT,38551:WK,38585:ZC,38704:XS,38739:LJ,38761:GJ,38808:SQ,39048:JG,39049:XJ,39052:HG,39076:CZ,39271:XT,39534:TD,39552:TD,39584:PB,39647:SB,39730:LG,39748:TPB,40109:ZQ,40479:ND,40516:HG,40536:HG,40583:QJ,40765:YQ,40784:QJ,40840:YK,40863:QJG,";
            string resStr = "";
            int i, j, uni;
            uni = (UInt16)chineseCharacter;
            if (uni > 40869 || uni < 19968)
                return resStr;
            //返回该字符在Unicode字符集中的编码值
            i = MultiPinyin.IndexOf(uni.ToString());
            //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
            if (i < 0)
            //获取非多音字汉字首字母
            {
                resStr = strChineseFirstPY[uni - 19968].ToString();
            }
            else { //获取多音字汉字首字母
                j = MultiPinyin.IndexOf(",", i);
                resStr = MultiPinyin.Substring(i + 6, j - i - 6);
            }
            return resStr;

        }

        /// <summary>
        /// 是否为空
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static bool IsNullOrEmpty(this string source) {
            return string.IsNullOrWhiteSpace(source?.Trim());
        }

        /// <summary>
        /// 检测一个字符串是不是以汉字开始
        /// </summary>
        /// <param name="source">要检测的字符串</param>
        /// <returns>是否为汉字开始</returns>
        private static bool IsStartWithChinese(this string source)
        {
            if (source.IsNullOrEmpty()) return false;
            return (int)source[0] > 0x4E00 && (int)source[0] < 0x9FA5;
        }
        

        /// <summary>
        /// 获取两个以分隔符隔开的字符串的差集
        /// </summary>
        /// <param name="source"></param>
        /// <param name="minuend"></param>
        /// <param name="separation">字符串的分隔符</param>
        /// <returns></returns>
        public static string Minus(this string source, string minuend, string separation = ",") {
            string rc = "";

            source = source?.Trim() ?? "";
            minuend = minuend?.Trim() ?? "";
            if (!string.IsNullOrWhiteSpace(source)) {
                List<string> sList = source.Split(new string[] { separation }, StringSplitOptions.RemoveEmptyEntries).Distinct().ToList();
                if (sList?.Count > 0) {
                    List<string> mList = minuend.Split(new string[] { separation }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    List<string> result = sList.Except(mList ?? new List<string>()).ToList();

                    rc = result?.Count > 0 ? String.Join(separation, result) : "";
                }
            }

            return rc;
        }

        /// <summary>
        /// 从被分隔的字符串中提取数字,组装为集合，并按照升序排序
        /// </summary>
        /// <param name="source"></param>
        /// <param name="separation">字符串的分隔符</param>
        /// <returns></returns>
        public static List<long> GetNumberList(this string source, string separation = ",") {
            Regex reg = new Regex(@"^\d+$");
            return source.Split(new string[] { separation }, StringSplitOptions.RemoveEmptyEntries)
                       .Where(it => reg.IsMatch(it))
                       .Select(it => Convert.ToInt64(it))
                       .Distinct()
                       .OrderBy(it => it)
                       .ToList() ?? new List<long>();
        }

        /// <summary>
        /// 将string格式的数据转换为Guid格式的数据。若转换失败，则返回Guid.Empty
        /// </summary>
        public static Guid ToGuid(this string source) {
            return Guid.TryParse(source, out var rc) ? rc : Guid.Empty;
        }

        /// <summary>
        /// 将string格式的数据转换为Guid列表数据。若转换失败，则返回空列表
        /// </summary>
        /// <param name="source"></param>
        /// <param name="splitChars">分隔符，默认为一个半角逗号</param>
        /// <param name="ignoreIllegalData">是否忽略不为Guid类型的字符 true(默认):忽略 false:不忽略</param>
        /// <returns></returns>
        public static List<Guid> ToGuidList(this string source, string splitChars = ",", bool ignoreIllegalData = true) {
            if (source.IsNullOrEmpty())
                return new List<Guid>();

            splitChars = splitChars.IsNullOrEmpty() ? "," : splitChars;

            var rc = new List<Guid>();
            var list = source.Split(new string[] { splitChars }, StringSplitOptions.RemoveEmptyEntries).ToList();
            foreach (var item in list) {
                if (item.IsGuid())
                    rc.Add(item.ToGuid());
                else if (!ignoreIllegalData)
                    return new List<Guid>();
            }

            return rc;
        }


        /// <summary>
        /// 判断是否为Guid
        /// </summary>
        /// <param name="guid"></param>
        /// <param name="isNotGuidEmpty">true:不能为空值 false:可以为空值</param>
        /// <returns></returns>
        public static bool IsGuid(this string guid, bool isNotGuidEmpty = true) {

            return Guid.TryParse(guid, out var result) && (isNotGuidEmpty ? result != Guid.Empty : !isNotGuidEmpty);
        }
        
        /// <summary>
        /// 计算MD5哈希值
        /// </summary>
        /// <param name="source"></param>
        /// <param name="encoding"></param>
        /// <returns></returns>
        public static string ToMd5(this string source, string encoding = "utf-8") {
            string rc = "";

            MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
            byte[] buffer = md5.ComputeHash(Encoding.GetEncoding(encoding).GetBytes(source));
            StringBuilder sbuilder = new StringBuilder();
            for (int i = 0; i < buffer.Length; i++)
                sbuilder.Append(buffer[i].ToString("x2"));
            rc = sbuilder.ToString();

            return rc;
        }

        /// <summary>
        /// 计算HMAC哈希值，并返回byte[]
        /// </summary>
        /// <param name="source"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static byte[] ToHMAC(this string source, string key) {
            byte[] rc = null;

            byte[] buffer = Encoding.UTF8.GetBytes(source);
            using (HMACSHA1 hmac = new HMACSHA1()) {
                hmac.Key = Encoding.UTF8.GetBytes(key);
                rc = hmac.ComputeHash(buffer);
            }

            return rc;
        }

        /// <summary>
        /// 计算HMAC哈希值，并返回字符串
        /// </summary>
        /// <param name="source"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static string ToHMACString(this string source, string key) {
            string rc = "";

            byte[] result = ToHMAC(source, key);
            StringBuilder sbuilder = new StringBuilder();
            for (int i = 0; i < result.Length; i++)
                sbuilder.Append(result[i].ToString("x2"));
            rc = sbuilder.ToString();

            return rc;
        }

        /// <summary>
        /// 将常规字符串转换为BASE64字符串
        /// </summary>
        /// <param name="source"></param>
        /// <param name="encoding">编码，默认为utf-8</param>
        /// <returns></returns>
        public static string ToBase64(this string source, string encoding = "utf-8")
        {
            if (source.IsNullOrEmpty())
                return "";

            return Encoding.GetEncoding(encoding).GetBytes(source).ToBase64();
        }

        /// <summary>
        /// 将BASE64字符串转换为常规字符串
        /// </summary>
        /// <param name="base64"></param>
        /// <param name="encoding">编码，默认为utf-8</param>
        /// <returns></returns>
        public static string GetFromBase64(this string base64, string encoding = "utf-8") {
            byte[] buffer = Convert.FromBase64String(base64);
            return Encoding.GetEncoding(encoding).GetString(buffer);
        }

        /// <summary>
        /// 读出文件的内容，并将内容当作字符串返回
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <param name="encoding">将文件内容转为字符串时的编码，默认为utf-8</param>
        /// <returns></returns>
        public static string GetFileContent(this string filePath, string encoding = "utf-8") {
            string rc = "";

            using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {
                using (var reader = new BinaryReader(fs)) {
                    byte[] buffer = new byte[fs.Length];
                    reader.Read(buffer, 0, buffer.Length);
                    rc = Encoding.GetEncoding(encoding).GetString(buffer);
                }
            }

            return rc;
        }

        /// <summary>
        /// Url编码
        /// </summary>
        /// <param name="source"></param>
        /// <param name="isUppercase"></param>
        /// <returns></returns>
        public static string UrlEncode(this string source, bool isUppercase = false) {
            string rc = "";

            if (!isUppercase)
                rc = HttpUtility.UrlEncode(source);
            else {
                StringBuilder sbuilder = new StringBuilder();
                string temp = "";
                foreach (char c in source) {
                    temp = HttpUtility.UrlEncode(c.ToString());
                    sbuilder.Append(temp.Length > 1 ? temp.ToUpper() : c.ToString());
                }
                rc = sbuilder.ToString();
            }

            return rc;
        }

        /// <summary>
        /// Url解码
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static string UrlDecode(this string source) {
            return HttpUtility.UrlDecode(source);
        }

        /// <summary>
        /// 将源字符串中的Unicode编码转换为中文
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        public static string UnicodeToChinese(this string source) {
            return new Regex(@"\\u([a-z0-9]{4})", RegexOptions.IgnoreCase).Replace(source, m =>  m.Success ? ((char)int.Parse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber)).ToString() : m.Value);
        }

        /// <summary>
        /// 使用Http方式的异步方法下载远程文件并保存在本地.
        /// </summary>
        /// <param name="sourceFile">需要下载文件的Uri地址</param>
        /// <param name="destinationFile">保存文件的全路径名</param>
        /// <param name="downloadFileCompleted">文件下载完成后需要执行的委托，可以在此步骤完成相关状态的改变</param>
        public static void DownLoadFileAsync(this string sourceFile, string destinationFile, Action<AsyncCompletedEventArgs> downloadFileCompleted) {
            WebClient client = null;
            try {
                client = new WebClient();
                client.DownloadFileCompleted += (s, a) => {
                    try {
                        FileInfo fi = new FileInfo(destinationFile);
                        //如果文件存在且没有内容，则删除该文件
                        if (fi.Exists && fi.Length <= 0)
                            fi.Delete();

                        downloadFileCompleted(a);
                    }
                    finally {
                        client?.Dispose();
                    }
                };
               
                client.DownloadFileAsync(new Uri(sourceFile), destinationFile, new { Source = sourceFile, Destination = destinationFile });
            }
            catch (Exception ex) {}
        }


        #region AES 加解密

        /// <summary>
        /// AES加密
        /// </summary>
        /// <param name="source">需要被加密的源字符串</param>
        /// <param name="key">支持32位密钥</param>
        /// <returns></returns>
        public static string AesEncrypt(this string source, string key) {
            var encryptKey = Encoding.UTF8.GetBytes(key);

            using (var aesAlg = Aes.Create()) {
                using (var encryptor = aesAlg.CreateEncryptor(encryptKey, aesAlg.IV)) {
                    using (var msEncrypt = new MemoryStream()) {
                        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor,
                            CryptoStreamMode.Write))

                        using (var swEncrypt = new StreamWriter(csEncrypt)) {
                            swEncrypt.Write(source);
                        }

                        var iv = aesAlg.IV;

                        var decryptedContent = msEncrypt.ToArray();

                        var result = new byte[iv.Length + decryptedContent.Length];

                        Buffer.BlockCopy(iv, 0, result, 0, iv.Length);
                        Buffer.BlockCopy(decryptedContent, 0, result,
                            iv.Length, decryptedContent.Length);

                        return Convert.ToBase64String(result);
                    }
                }
            }
        }

        /// <summary>
        /// AES解密
        /// </summary>
        /// <param name="source">需要被解密的源字符串</param>
        /// <param name="key">支持32位密钥</param>
        /// <returns></returns>
        public static string AesDecrypt(this string source, string key) {
            var fullCipher = Convert.FromBase64String(source);

            byte[] iv = new byte[16];

            var cipher = new byte[fullCipher.Length - iv.Length];

            Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
            Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, fullCipher.Length - iv.Length);
            var buffer = Encoding.UTF8.GetBytes(key);

            using (var aesAlg = Aes.Create()) {
                using (var decryptor = aesAlg.CreateDecryptor(buffer, iv)) {
                    string result;
                    using (var msDecrypt = new MemoryStream(cipher)) {
                        using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)) {
                            using (var srDecrypt = new StreamReader(csDecrypt)) {
                                result = srDecrypt.ReadToEnd();
                            }
                        }
                    }

                    return result;
                }
            }
        }


        #endregion

        /// <summary>
        /// 将json字符串转换为对应的实体类型
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="source"></param>
        /// <param name="isNull">如果转换失败，是否得到为null的结果. true:返回null  false(默认):返回一个不为null的实体</param>
        /// <returns></returns>
        public static TEntity ToEntity<TEntity>(this string source, bool isNull = false) where TEntity : class {
            return JsonConvert.DeserializeObject<TEntity>(source.ToNormalString()) ?? (isNull ? null : Activator.CreateInstance<TEntity>());
        }

        /// <summary>
        /// 将json字符串转换为对应的实体类型
        /// </summary>
        /// <param name="source"></param>
        /// <param name="type">需要转换成的类型</param>
        /// <param name="isNull">如果转换失败，是否得到为null的结果. true:返回null  false(默认):返回一个不为null的实体</param>
        /// <returns></returns>
        public static object ToEntity(this string source, Type type, bool isNull = false) {
            return JsonConvert.DeserializeObject(source.ToNormalString(), type) ?? (isNull ? null : Activator.CreateInstance(type));
        }

        /// <summary>
        /// 如果当前路径没有带域名，就让其带上自定义的domain域名
        /// </summary>
        /// <param name="source"></param>
        /// <param name="domain">若源字符串没有域名，则将该域名加入到源字符串头部</param>
        /// <returns></returns>
        public static string ToUrlWithHost(this string source, string domain) {
            string rc = source.ToNormalString();

            Regex reg = new Regex(@"^\s*http[s]?:\/\/");
            if (!reg.IsMatch(rc.ToLower()))
                rc = $"{domain.ToNormalString().TrimEnd('/')}/{rc.ToNormalString().TrimStart('/')}";

            return rc;
        }


    }
}
